use embassy_time::Timer;
use embedded_graphics::pixelcolor::BinaryColor;
use embedded_graphics::prelude::*;
use embedded_graphics::primitives::Rectangle;

use crate::hal::traits::Ui as _;

pub(super) async fn run(display: &mut crate::hal::Ui) {
    let bounding_box = display.bounding_box();
    display.fill_contiguous(&bounding_box, Iter::new());

    for progress in 0..=128 {
        let update = Rectangle::new(Point::new(progress, 0), Size::new(1, 2));
        display.fill_solid(&update, BinaryColor::On);
        display.flush().await;
        Timer::after_millis(16).await;
    }
}

struct Iter {
    rows: core::array::IntoIter<u128, 64>,
    row: u128,
    mask: u128,
}

impl Iter {
    pub(super) fn new() -> Self {
        let mut rows = SPLASH.into_iter();
        let row = rows.next().unwrap();
        Self {
            rows,
            row,
            mask: 1 << 127,
        }
    }
}

impl Iterator for Iter {
    type Item = BinaryColor;

    fn next(&mut self) -> Option<Self::Item> {
        if self.mask == 0 {
            self.row = self.rows.next()?;
            self.mask = 1 << 127;
        }

        let pixel = BinaryColor::from((self.row & self.mask) != 0);
        self.mask >>= 1;

        Some(pixel)
    }
}

static SPLASH: [u128; 64] = [
    0x00000000000000000000000000000000,
    0x00000000000000000000000000000000,
    0x00000000000000000000000000000000,
    0x00000000000000000000000000000000,
    0x00000000000000000000000000000000,
    0x00000000000000000000000000000000,
    0x00000000000000000000000000000000,
    0x00000000000000000000000000000000,
    0x00000000000000000000000000000000,
    0x00000000000000000000000000000000,
    0x00000000000000000000000000000000,
    0x00000000000000000000000000000000,
    0x000001E000003807FFFFFFC003800000,
    0x000001F00000F80FFFFFFFC007800000,
    0x000001F00003F80FFFFFFF8007800000,
    0x000000F80007E000003C3C000F000000,
    0x00000078000F8000003C1E000F000000,
    0x00000078001F000000381E001E000000,
    0x0000007C003E000000380F003E000000,
    0x0000007C003C000000780F003C000000,
    0x0000003C007800000078078078000000,
    0x0000003C0078000000700780F8000000,
    0x0000003C00F01820C07003C0F0000000,
    0x0000003C00F02461207003C1E0000000,
    0x0000003C01E02C2160F001E1E0000000,
    0x0000003C01E03421A0F001E3C0000000,
    0x0000003C03C0242120E000E7C0000000,
    0x0000003C03C01974C0E000F780000000,
    0x0000003C0780000000E000FF00000000,
    0x0000003C0780000001E0007F00000000,
    0x0000003C0F00000001E0007E00000000,
    0x0000003C0F00000001C0003C00000000,
    0x0000003C1E00000001C0003C00000000,
    0x0000003C1E00000003C0007E00000000,
    0x0000003C3C07018003C000FE00000000,
    0x0000003C3C1FE1C7C38000FF00000000,
    0x0000003C783FE1CFE38001EF00000000,
    0x0000003C787870DE638003E700000000,
    0x0000003CF07030FC078003C780000000,
    0x0000003CF0E030F80780078780000000,
    0x0000003DE1E070F007000783C0000000,
    0x0000003DE1C0F0F007000F03C0000000,
    0x0000003FC3FFE0E007001F01E0000000,
    0x0000003FC3FF80E00F001E01E0000000,
    0x0000003F838000E00F003C00F0000000,
    0x0000003F838001E00E007C00F0000000,
    0x0000003F018031C00E00780078000000,
    0x0000003F018071C01E00F00078000000,
    0x0000007E01C1E3801E00F0003C000000,
    0x0000007E01C3E3801C01E0003C000000,
    0x0000007C00FF83801C01E0001C000000,
    0x0000007C007E03001C01C0001C000000,
    0x00000000000000000000000000000000,
    0x00000000000000000000000000000000,
    0x00000000000000000000000000000000,
    0x00000000000000000000000000000000,
    0x00000000000000000000000000000000,
    0x00000000000000000000000000000000,
    0x00000000000000000000000000000000,
    0x00000000000000000000000000000000,
    0x00000000000000000000000000000000,
    0x00000000000000000000000000000000,
    0x00000000000000000000000000000000,
    0x00000000000000000000000000000000,
];
