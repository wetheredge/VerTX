version: 3

includes:
  embedded:
    taskfile: ../.config/tasks/Taskfile.embedded.yaml
    internal: true
    vars:
      chip: "{{.VERTX_CHIP}}"
      features: "{{.VERTX_FEATURES}}"

dotenv:
  - ../.env
  - .env
  - ../.env.target
  - ../.config/env

tasks:
  default:
    silent: true
    cmds:
      - task --list-all --sort none
      - echo
      - echo 'Except for tasks starting with `simulator:`, all tasks require a target. This'
      - echo 'can be set by running `task target:set` in the root of the repo.'

  check:
    requires:
      vars: [VERTX_TARGET, VERTX_CHIP]
    cmds:
      - task: embedded:cargo
        vars:
          command: clippy
          args: "{{.CLI_ARGS}}"

  build:
    requires:
      vars: [VERTX_TARGET, VERTX_CHIP]
    cmds:
      - task: embedded:cargo
        vars:
          command: build
          args: "{{.CLI_ARGS}}"
      - task: post-build
        vars: { profile: debug }

  build:release:
    requires:
      vars: [VERTX_TARGET, VERTX_CHIP]
    cmds:
      - task: embedded:cargo
        vars:
          command: build
          args: --release {{.CLI_ARGS}}
      - task: post-build
        vars: { profile: release }

  post-build:
    internal: true
    cmd: cp ../target/{{get (get .all_chip_data .VERTX_CHIP) "target"}}/{{.profile}}/vertx ../target/vertx
    silent: true

  flash:
    - task: embedded:flash
      vars:
        flash: 2mb
        bin: ../target/vertx

  simulator:check:
    cmds:
      - task: simulator:cargo
        vars: { command: clippy }


  simulator:build:
    cmds:
      - task: simulator:cargo
        vars: { command: build }
      - task: simulator:bindgen
        vars: { profile: debug }

  simulator:build:release:
    cmds:
      - task: simulator:cargo
        vars: { command: build --release }
      - task: simulator:bindgen
        vars: { profile: release }
      - task: simulator:optimize

  simulator:bindgen:
    internal: true
    dir: ../target
    cmds:
      - cargo bin wasm-bindgen --out-dir simulator --target web wasm32-unknown-unknown/{{.profile}}/vertx.wasm
      - 'echo "export const memoryName: \"memory\";" >> simulator/vertx.d.ts'
      - echo 'export const memoryName = "memory";' >> simulator/vertx.js
      # XXX: This can be dropped when any of the following happen:
      # - esp-wifi supports deinitialization of wifi and the reboot-to-toggle-configurator thing is removed
      # - embassy-time can run in a Worker, allowing restarts to happen by creating a new Worker thread 
      # - wasm-bindgen generates more usable JS bindings
      # - even uglier hacks get written to cobble together something smarter out of what wasm-bindgen generates
      - sed -i 's/if (wasm !== undefined) return wasm;//' simulator/vertx.js

  simulator:optimize:
    internal: true
    dir: ../target/simulator
    cmd: cargo bin wasm-opt $VERTX_WASM_OPT_ARGS --output vertx_bg.wasm vertx_bg.wasm | bun run ../../scripts/wasm-rename.ts

  simulator:cargo:
    internal: true
    cmd: cargo {{.command}} --target wasm32-unknown-unknown --lib -F simulator {{.CLI_ARGS}}

  :*: cd .. && task {{index .MATCH 0}}
