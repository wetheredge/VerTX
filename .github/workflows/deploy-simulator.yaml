name: Deploy simulator

on:
  push:
    branches: [main]
    paths-ignore:
      - .github/workflows/ci.yaml
      - '**/README.md'
      - '**/Taskfile.yaml'
  pull_request:
    branches: [main]
    paths-ignore:
      - .github/workflows/ci.yaml
      - '**/README.md'
      - '**/Taskfile.yaml'

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  RUSTC_WRAPPER: sccache
  SCCACHE_GHA_ENABLED: 'true'

jobs:
  build-configurator:
    name: Build configurator
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: vertx-configurator
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          persist-credentials: false
      - uses: oven-sh/setup-bun@v2.0.1
        with:
          bun-version-file: .tool-versions
      - run: bun install --frozen-lockfile
      - run: bun run astro build
        env:
          NODE_ENV: production
          VERTX_SIMULATOR: true
      - run: bun run ../scripts/csp-nonce.ts
      - uses: actions/upload-artifact@v4.6.2
        with:
          name: configurator
          path: vertx-configurator/dist/
          compression-level: 1
          if-no-files-found: error

  build-vertx:
    name: Build VerTX
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          persist-credentials: false
      - uses: mozilla-actions/sccache-action@v0.0.9
      - uses: ./.github/actions/setup-rust
      - uses: oven-sh/setup-bun@v2.0.1
        with:
          bun-version-file: .tool-versions
      - name: Install wasm-bindgen
        uses: taiki-e/install-action@v2.49.40
        with:
          tool: wasm-bindgen@0.2.100 # dep:cargo-bin:wasm-bindgen-cli
      - name: Install wasm-opt
        uses: taiki-e/install-action@v2.49.40
        with:
          tool: wasm-opt@0.116.1 # dep:cargo-bin:wasm-opt
      - run: cargo build -Zbuild-std=std,panic_abort --release --target wasm32-unknown-unknown --lib -F simulator
        working-directory: vertx
        env:
          VERTX_GIT_BRANCH: ${{ github.head_ref || github.ref_name }}
      - run: wasm-bindgen --out-dir simulator --target web wasm32-unknown-unknown/release/vertx.wasm
        working-directory: target
      - name: Patch vertx.js
        run: |
          echo 'export const memoryName: "memory";' >> vertx.d.ts
          echo 'export const memoryName = "memory";' >> vertx.js
        working-directory: target/simulator
      - run: cat .config/env >> "$GITHUB_ENV"
      - run: wasm-opt $VERTX_WASM_OPT_ARGS --output target/simulator/vertx_bg.wasm target/simulator/vertx_bg.wasm | bun run scripts/wasm-rename.ts target/simulator
      - uses: actions/upload-artifact@v4.6.2
        with:
          name: vertx
          path: target/simulator
          compression-level: 1
          if-no-files-found: error

  build-simulator:
    name: Build simulator
    runs-on: ubuntu-latest
    needs: [build-configurator, build-vertx]
    defaults:
      run:
        working-directory: vertx-simulator
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          persist-credentials: false
      - uses: oven-sh/setup-bun@v2.0.1
        with:
          bun-version-file: .tool-versions
      - name: Get VerTX
        uses: actions/download-artifact@v4.2.1
        with:
          name: vertx
          path: target/simulator
      - run: bun install --frozen-lockfile
      - run: bun run vite build
      - run: bun run ../scripts/csp-nonce.ts
      - uses: actions/upload-artifact@v4.6.2
        with:
          name: simulator
          path: vertx-simulator/dist
          compression-level: 1
          if-no-files-found: error

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs:
      - build-configurator
      - build-simulator
    steps:
      - name: Get simulator
        uses: actions/download-artifact@v4.2.1
        with:
          name: simulator
          path: out
      - name: Get configurator
        uses: actions/download-artifact@v4.2.1
        with:
          name: configurator
          path: out/configurator
      - name: Create out.tar.zstd
        run: tar --create --zstd --exclude='.[^/]*' --file=out.tar.zstd --directory=out .
      - name: Get commit & branch
        id: refs
        uses: actions/github-script@v7.0.1
        env:
          COMMIT: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
          BRANCH: ${{ github.head_ref || github.ref_name }}
        with:
          script: |
            const commit = process.env.COMMIT.substring(0, 7);
            const branch = process.env.BRANCH;
            core.info(`Deploying commit ${commit} aliased to ${branch}`);
            return { commit, branch };
      - name: Join tailnet
        uses: tailscale/github-action@16d7e0b7812f55e668628a71630a09956522baa9
        with:
          oauth-client-id: ${{ secrets.TS_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_SECRET }}
          tags: tag:ci-vertx
      - name: Deploy commit
        run: |
          curl --fail-with-body -X POST '${{ secrets.DEPLOY_HOST }}/commit/${{ fromJSON(steps.refs.outputs.result).commit }}' --basic -u 'simulator:${{ secrets.SIMULATOR_DEPLOY_PASSWORD }}' -H 'content-type: application/zstd' --data-binary @out.tar.zstd
      - name: Update branch
        run: |
          curl --fail-with-body -X POST '${{ secrets.DEPLOY_HOST }}/branch' --basic -u 'simulator:${{ secrets.SIMULATOR_DEPLOY_PASSWORD }}' -H 'content-type: application/json' -d '${{ steps.refs.outputs.result }}'
