name: Continuous Integration

on:
  push:
    paths-ignore:
      - "**/*.md"
    branches:
      - main
      - ci
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  RUSTFLAGS: -Dwarnings

jobs:
  unused-dependencies:
    name: No unused dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
      - run: rm rust-toolchain.toml
      - name: Install cargo-machete
        uses: taiki-e/install-action@v2.47.2
        with:
          tool: cargo-machete@0.7.0 # dep:cargo-bin:cargo-machete
      - run: cargo machete

  cache-rust-toolchain:
    name: Cache Rust toolchain
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: ./.github/actions/setup-rust
        with:
          lookup-only: 'true'

  check-targets:
    name: Check targets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: oven-sh/setup-bun@v2.0.1
        with:
          bun-version-file: .tool-versions
      - run: bun install --frozen-lockfile
      - run: bun run scripts/check-targets.ts

  config-codegen:
    name: Check config codegen
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
      - run: cd vertx-config && sha512sum --status --check out/.hashes

  rustfmt:
    runs-on: ubuntu-latest
    needs: cache-rust-toolchain
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: ./.github/actions/setup-rust
      - run: cargo fmt --all --check

  # Only run for entrypoints; dependencies will be checked where they are used
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    needs: cache-rust-toolchain
    strategy:
      fail-fast: false
      matrix:
        crate:
          - vertx-crsf
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: ./.github/actions/setup-rust
      - run: cargo clippy --all-targets -p ${{ matrix.crate }}

  clippy-config-migrate:
    name: Clippy (config-migrate)
    runs-on: ubuntu-latest
    needs: cache-rust-toolchain
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: ./.github/actions/setup-rust
      - run: cargo clippy -Zbuild-std=core --target wasm32-unknown-unknown -p vertx-config-migrate -F up
      - run: cargo clippy -Zbuild-std=core --target wasm32-unknown-unknown -p vertx-config-migrate -F down

  build-configurator:
    name: Build configurator
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: vertx-configurator
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: oven-sh/setup-bun@v2.0.1
        with:
          bun-version-file: .tool-versions
      - run: bun install --frozen-lockfile
      - run: bun run vite build
      - run: bun run scripts/compress.ts
      - uses: actions/upload-artifact@v4.5.0
        with:
          name: configurator
          path: vertx-configurator/dist/
          compression-level: 1
          if-no-files-found: error

  clippy-vertx:
    name: Clippy (vertx, ${{ matrix.target }})
    runs-on: ubuntu-latest
    needs: [cache-rust-toolchain, build-configurator]
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: devkit-esp32s3
            chip: esp32s3
            display: ssd1306
          - target: devkit-rp-pico
            chip: rp2040
            display: ssd1306
    env:
      VERTX_SERVER_SKIP_CONFIGURATOR_BUILD: true
      VERTX_TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: ./.github/actions/setup-rust
      - name: Get pre-built configurator
        uses: actions/download-artifact@v4.1.8
        with:
          name: configurator
          path: vertx-configurator/dist
      - id: chip
        run: jq -r '"target=\(.${{ matrix.chip }})"' .config/chip2target.json >> "$GITHUB_OUTPUT"
      - name: Run clippy
        run: cargo clippy -Zbuild-std=alloc,core --target '${{ steps.chip.outputs.target }}' -F 'chip-${{ matrix.chip }} display-${{ matrix.display }}'
        working-directory: vertx

  clippy-vertx-simulator:
    name: Clippy (vertx simulator)
    runs-on: ubuntu-latest
    needs: [cache-rust-toolchain, build-configurator]
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: ./.github/actions/setup-rust
      - name: Run clippy
        run: cargo clippy -Zbuild-std=std,panic_abort --target wasm32-unknown-unknown --lib -F simulator
        working-directory: vertx

  clippy-backpack:
    name: Clippy (backpack, ${{ matrix.chip }})
    runs-on: ubuntu-latest
    needs: [cache-rust-toolchain, build-configurator]
    env:
      VERTX_SERVER_SKIP_CONFIGURATOR_BUILD: true
    strategy:
      fail-fast: false
      matrix:
        chip:
          - esp32
          - esp32c3
          - esp32s3
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: ./.github/actions/setup-rust
      - name: Get pre-built configurator
        uses: actions/download-artifact@v4.1.8
        with:
          name: configurator
          path: vertx-configurator/dist
      - id: chip
        run: jq -r '"target=\(.${{ matrix.chip }})"' .config/chip2target.json >> "$GITHUB_OUTPUT"
      - name: Run clippy
        run: cargo clippy -Zbuild-std=alloc,core --target '${{ steps.chip.outputs.target }}' -F 'chip-${{ matrix.chip }}'
        working-directory: vertx-backpack

  tests:
    name: Tests
    runs-on: ubuntu-latest
    needs: cache-rust-toolchain
    strategy:
      fail-fast: false
      matrix:
        crate:
          - vertx-crsf
    steps:
      - uses: actions/checkout@v4.2.2
      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2.47.2
        with:
          tool: nextest@0.9.85 # dep:cargo-bin:cargo-nextest
      - uses: ./.github/actions/setup-rust
      - run: cargo nextest run
        working-directory: ${{ matrix.crate }}

  biome:
    name: Biome
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dir: [scripts, vertx-configurator, vertx-simulator]
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: biomejs/setup-biome@v2.2.1
        env:
          GITHUB_TOKEN: null
      - run: biome version
      - run: biome ci --reporter=github --error-on-warnings .
        working-directory: ${{ matrix.dir }}

  dprint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: dprint/check@v2.2
        with:
          dprint-version: 0.47.6 # dep:cargo-bin:dprint
          config-path: .config/dprint.json

  typos:
    name: Typos
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
      - uses: crate-ci/typos@v1.29.5 # dep:asdf:typos

  passed:
    runs-on: ubuntu-latest
    needs:
      - unused-dependencies
      - check-targets
      - config-codegen
      - rustfmt
      - clippy
      - clippy-config-migrate
      - clippy-vertx
      - clippy-vertx-simulator
      - clippy-backpack
      - tests
      - biome
      - dprint
      - typos
    steps:
      - run: 'true'
