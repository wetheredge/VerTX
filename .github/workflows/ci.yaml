name: Continuous Integration

on:
  push:
    paths-ignore:
      - "**/*.md"
    branches:
      - main
      - ci
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  RUSTFLAGS: -Dwarnings

jobs:
  unused-dependencies:
    name: No unused dependencies
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.0
      - name: Install cargo-machete
        uses: taiki-e/install-action@v2.44.13
        with:
          tool: cargo-machete@0.6.2 # dep:cargo-bin:cargo-machete
      - run: cargo machete

  toolchains-synced:
    name: Toolchains are synced
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.0
      - uses: oven-sh/setup-bun@v2.0.1
        with:
          bun-version-file: .tool-versions
      - run: bun run scripts/sync-toolchains.ts
      - run: git diff --exit-code

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.0
      - run: cargo fmt --all --check

  # Only run for entrypoints; dependencies will be checked where they are used
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        crate:
          - vertx-crsf
        include:
          - crate: vertx-config
          - crate: vertx-config
            args: -F heapless
    steps:
      - uses: actions/checkout@v4.2.0
      - uses: Swatinem/rust-cache@v2.7.3
      - run: cargo clippy --all-targets -p ${{ matrix.crate }} ${{ matrix.args }}

  build-configurator:
    name: Build configurator
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: vertx-configurator
    steps:
      - uses: actions/checkout@v4.2.0
      - uses: oven-sh/setup-bun@v2.0.1
        with:
          bun-version-file: .tool-versions
      - run: bun install --frozen-lockfile
      - run: bun run -b vite build
      - run: bun run scripts/compress.ts
      - uses: actions/upload-artifact@v4.4.0
        with:
          name: configurator
          path: vertx-configurator/dist/
          compression-level: 1
          if-no-files-found: error

  clippy-vertx:
    name: Clippy (vertx, ${{ matrix.target }})
    runs-on: ubuntu-latest
    needs: build-configurator
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: devkit-esp32s3
            chip: esp32s3
          - target: devkit-rp-pico
            chip: rp2040
    env:
      VERTX_SERVER_SKIP_CONFIGURATOR_BUILD: true
      VERTX_TARGET: ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4.2.0
      - id: chip
        uses: ./.github/actions/setup-chip
        with:
          chip: ${{ matrix.chip }}
      - uses: Swatinem/rust-cache@v2.7.3
      - name: Get pre-built configurator
        uses: actions/download-artifact@v4.1.8
        with:
          name: configurator
          path: vertx-configurator/dist
      - name: Run clippy
        run: cargo clippy -Zbuild-std=alloc,core --target "${{ steps.chip.outputs.target }}" -F "chip-${{ matrix.chip }}"
        working-directory: vertx

  clippy-vertx-simulator:
    name: Clippy (vertx simulator)
    runs-on: ubuntu-latest
    needs: build-configurator
    env:
      VERTX_SERVER_SKIP_CONFIGURATOR_BUILD: true
    steps:
      - uses: actions/checkout@v4.2.0
      - uses: Swatinem/rust-cache@v2.7.3
      - name: Get pre-built configurator
        uses: actions/download-artifact@v4.1.8
        with:
          name: configurator
          path: vertx-configurator/dist
      - name: Run clippy
        run: cargo clippy --bin simulator -F simulator
        working-directory: vertx
        env:
          VERTX_TARGET: devkit
          WIFI_SSID: CI
          WIFI_PASSWORD: password

  clippy-simulator:
    name: Clippy (simulator)
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/gtk-rs/gtk4-rs/gtk4:latest
    steps:
      - uses: actions/checkout@v4.2.0
      - name: Install rustup
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | bash -s -- -y --default-toolchain none
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      - uses: Swatinem/rust-cache@v2.7.3
      - name: Run clippy
        run: cargo clippy
        working-directory: vertx-simulator

  clippy-backpack:
    name: Clippy (backpack, ${{ matrix.chip }})
    runs-on: ubuntu-latest
    needs: build-configurator
    env:
      VERTX_SERVER_SKIP_CONFIGURATOR_BUILD: true
    strategy:
      fail-fast: false
      matrix:
        chip:
          - esp32
          - esp32c3
          - esp32s3
    steps:
      - uses: actions/checkout@v4.2.0
      - id: chip
        uses: ./.github/actions/setup-chip
        with:
          chip: ${{ matrix.chip }}
      - uses: Swatinem/rust-cache@v2.7.3
      - name: Get pre-built configurator
        uses: actions/download-artifact@v4.1.8
        with:
          name: configurator
          path: vertx-configurator/dist
      - name: Run clippy
        run: cargo clippy -Zbuild-std=alloc,core --target "${{ steps.chip.outputs.target }}" -F "chip-${{ matrix.chip }}"
        working-directory: vertx-backpack

  tests:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        crate: [vertx-config, vertx-crsf]
    steps:
      - uses: actions/checkout@v4.2.0
      - uses: Swatinem/rust-cache@v2.7.3
      - name: Install cargo-nextest
        uses: taiki-e/install-action@v2.44.13
        with:
          tool: nextest@0.9.72 # dep:cargo-bin:cargo-nextest
      - run: cargo nextest run
        working-directory: ${{ matrix.crate }}

  biome:
    name: Biome
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        dir: [scripts, vertx-configurator]
    steps:
      - uses: actions/checkout@v4.2.0
      - uses: biomejs/setup-biome@v2.2.1
        env:
          GITHUB_TOKEN: null
      - run: biome version
      - run: biome ci --reporter=github --error-on-warnings .
        working-directory: ${{ matrix.dir }}

  dprint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.0
      - uses: dprint/check@v2.2
        with:
          dprint-version: 0.47.2 # dep:cargo-bin:dprint
          config-path: .config/dprint.json

  typos:
    name: Typos
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.0
      - uses: crate-ci/typos@v1.24.6 # dep:asdf:typos

  passed:
    runs-on: ubuntu-latest
    needs:
      - unused-dependencies
      - toolchains-synced
      - rustfmt
      - clippy
      - clippy-vertx
      - clippy-vertx-simulator
      - clippy-simulator
      - clippy-backpack
      - tests
      - biome
      - dprint
      - typos
    steps:
      - run: 'true'
